/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hibernate;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.sql.*;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.UIManager.LookAndFeelInfo;

/**
 *
 * @author jusuf
 */
public class Hibernate extends javax.swing.JFrame {

    /**
     * Creates new form Hibernate
     */
    public Hibernate() {
        initComponents();
        
        
        
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Perzistencija - Hibernate");
        setLocation(new java.awt.Point(370, 150));
        setName("Hibernate"); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 300));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 200));

        jLabel1.setFont(new java.awt.Font("Myanmar Text", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("APLIKACIJA ZA INTERAKCIJU SA BAZOM");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));
        jLabel1.setName("NaslovLabel"); // NOI18N

        jButton1.setText("Izlistaj sve zaposlene");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Izmjena podataka po ID-u");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Izlistaj zaposlene po imenu");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Odaberite željenu operaciju");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton4.setText("Brisanje zaposlenog");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Ubacivanje novog zaposlenog");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Poveži se sa bazom");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Konekcija sa bazom još uvijek nije ostvarena!");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setMaximumSize(new java.awt.Dimension(354, 34));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try (java.sql.Connection konekcija = DriverManager.getConnection("jdbc:mysql://localhost/perzistencija",
                "root", "");) {
            Zaposleni uposlenik2 = null;
            List<Zaposleni> zaposleni_collection = new ArrayList();
            
            Statement citanje = konekcija.createStatement();
            citanje.executeQuery("SELECT * FROM zaposleni");
            
            ResultSet result_set = citanje.getResultSet();
            while(result_set.next()) {
                    uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                            result_set.getString("adresa"), result_set.getDouble("dohodak"));
                    zaposleni_collection.add(uposlenik2);
            }
            JOptionPane.showMessageDialog(this, zaposleni_collection, "Lista zaposlenih", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (SQLException ex) {
            jLabel3.setText("Error in database connection: \n" + ex.getMessage());
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String uneseniID = JOptionPane.showInputDialog(null, "Unesite ID zaposlenog čije podatke želite izmijeniti!", "Izmjena podataka", JOptionPane.INFORMATION_MESSAGE);
        String[] polja = { "Ime", "Godine", "Adresa", "Visina dohotka"};
        String odabranoPolje = (String) JOptionPane.showInputDialog(null, "Odaberite koji podatak želite da izmijenite!",
        "Izmjena podataka", JOptionPane.QUESTION_MESSAGE, null, polja, polja[0]);
        
        try (java.sql.Connection konekcija = DriverManager.getConnection("jdbc:mysql://localhost/perzistencija",
                "root", "");) {
            if(odabranoPolje == "Ime") {
                String novoIme = JOptionPane.showInputDialog(null, "Unesite novo ime za uposlenika!", "Promjena imena", JOptionPane.INFORMATION_MESSAGE);
                if(novoIme.isEmpty() == false) {
                    Statement izmjenaImena = konekcija.createStatement();
                    izmjenaImena.execute("UPDATE zaposleni SET ime = '" + novoIme + "' WHERE zaposleni_id = '" + uneseniID + "'");
                
                    Zaposleni uposlenik2 = null;
                    List<Zaposleni> zaposleni_collection = new ArrayList();

                    Statement citanje = konekcija.createStatement();
                    citanje.executeQuery("SELECT * FROM zaposleni WHERE zaposleni_id = '" + uneseniID + "'");

                    ResultSet result_set = citanje.getResultSet();
                    while(result_set.next()) {
                        uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                        result_set.getString("adresa"), result_set.getDouble("dohodak"));
                        zaposleni_collection.add(uposlenik2);
                    }
                    JOptionPane.showMessageDialog(this, zaposleni_collection, "Informacije o uposleniku", JOptionPane.INFORMATION_MESSAGE);
                }
                else
                    JOptionPane.showMessageDialog(this, "Ime nije promijemenjeno!", "Promjena imena", JOptionPane.INFORMATION_MESSAGE);
            }
            
                if(odabranoPolje == "Godine") {
                    String noveGodine = JOptionPane.showInputDialog(null, "Unesite nove godine za uposlenika!", "Promjena godina", JOptionPane.INFORMATION_MESSAGE);
                    if(noveGodine.isEmpty() == false) {
                        Statement izmjenaImena = konekcija.createStatement();
                        izmjenaImena.execute("UPDATE zaposleni SET godine = '" + noveGodine + "' WHERE zaposleni_id = '" + uneseniID + "'");
                    
                        Zaposleni uposlenik2 = null;
                        List<Zaposleni> zaposleni_collection = new ArrayList();

                        Statement citanje = konekcija.createStatement();
                        citanje.executeQuery("SELECT * FROM zaposleni WHERE zaposleni_id = '" + uneseniID + "'");

                        ResultSet result_set = citanje.getResultSet();
                        while(result_set.next()) {
                            uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                            result_set.getString("adresa"), result_set.getDouble("dohodak"));
                            zaposleni_collection.add(uposlenik2);
                        }
                        JOptionPane.showMessageDialog(this, zaposleni_collection, "Informacije o uposleniku", JOptionPane.INFORMATION_MESSAGE);
                    }
                    else
                        JOptionPane.showMessageDialog(this, "Godine nisu promijemenjene!", "Promjena godina", JOptionPane.INFORMATION_MESSAGE);
                }
                
                
                if(odabranoPolje == "Adresa") {
                    String novaAdresa = JOptionPane.showInputDialog(null, "Unesite novu adresu za uposlenika!", "Promjena adrese", JOptionPane.INFORMATION_MESSAGE);
                    if(novaAdresa.isEmpty() == false) {
                        Statement izmjenaImena = konekcija.createStatement();
                        izmjenaImena.execute("UPDATE zaposleni SET adresa = '" + novaAdresa + "' WHERE zaposleni_id = '" + uneseniID + "'");
                    
                        Zaposleni uposlenik2 = null;
                        List<Zaposleni> zaposleni_collection = new ArrayList();

                        Statement citanje = konekcija.createStatement();
                        citanje.executeQuery("SELECT * FROM zaposleni WHERE zaposleni_id = '" + uneseniID + "'");

                        ResultSet result_set = citanje.getResultSet();
                        while(result_set.next()) {
                            uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                            result_set.getString("adresa"), result_set.getDouble("dohodak"));
                            zaposleni_collection.add(uposlenik2);
                        }
                        JOptionPane.showMessageDialog(this, zaposleni_collection, "Informacije o uposleniku", JOptionPane.INFORMATION_MESSAGE);
                    }
                    else
                        JOptionPane.showMessageDialog(this, "Adresa nije promijemenjena!", "Promjena adrese", JOptionPane.INFORMATION_MESSAGE);
                }
                
                
                if(odabranoPolje == "Visina dohotka") {
                    String noviDohodak = JOptionPane.showInputDialog(null, "Unesite novu visinu dohotka za uposlenika!", "Promjena dohotka", JOptionPane.INFORMATION_MESSAGE);
                    if(noviDohodak.isEmpty() == false) {
                        Statement izmjenaImena = konekcija.createStatement();
                        izmjenaImena.execute("UPDATE zaposleni SET dohodak = '" + noviDohodak + "' WHERE zaposleni_id = '" + uneseniID + "'");
                    
                        Zaposleni uposlenik2 = null;
                        List<Zaposleni> zaposleni_collection = new ArrayList();

                        Statement citanje = konekcija.createStatement();
                        citanje.executeQuery("SELECT * FROM zaposleni WHERE zaposleni_id = '" + uneseniID + "'");

                        ResultSet result_set = citanje.getResultSet();
                        while(result_set.next()) {
                            uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                            result_set.getString("adresa"), result_set.getDouble("dohodak"));
                            zaposleni_collection.add(uposlenik2);
                        }
                        JOptionPane.showMessageDialog(this, zaposleni_collection, "Informacije o uposleniku", JOptionPane.INFORMATION_MESSAGE);
                    }
                    else
                        JOptionPane.showMessageDialog(this, "Visina dohotka nije promijemenjena!", "Promjena dohotka", JOptionPane.INFORMATION_MESSAGE);
                }
        }
            catch (SQLException ex) {
            jLabel3.setText("Error in database connection: \n" + ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String uneseniID = JOptionPane.showInputDialog(null, "Unesite ID zaposlenog kojeg želite obrisati!", "Brisanje uposlenika", JOptionPane.INFORMATION_MESSAGE);
        
        try (java.sql.Connection konekcija = DriverManager.getConnection("jdbc:mysql://localhost/perzistencija",
                "root", "");) {
            Statement brisanje = konekcija.createStatement();
            brisanje.execute("DELETE FROM zaposleni WHERE zaposleni_id = '" + uneseniID + "'");
            
            Statement citanje = konekcija.createStatement();
            citanje.executeQuery("SELECT * FROM zaposleni");
            
            Zaposleni uposlenik2 = null;
            List<Zaposleni> zaposleni_collection = new ArrayList();
            
            ResultSet result_set = citanje.getResultSet();
            while(result_set.next()) {
                    uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                            result_set.getString("adresa"), result_set.getDouble("dohodak"));
                    zaposleni_collection.add(uposlenik2);
            }
            
            JOptionPane.showMessageDialog(this, zaposleni_collection, "Lista uposlenika", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (SQLException ex) {
            jLabel3.setText("Error in database connection: \n" + ex.getMessage());
        }
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try (java.sql.Connection konekcija = DriverManager.getConnection("jdbc:mysql://localhost/perzistencija",
                "root", "");) {
            jLabel3.setText("Povezani ste sa bazom!");
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
            jButton5.setEnabled(true);
        }
        catch (SQLException ex) {
            jLabel3.setText("Error in database connection: \n" + ex.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String unesenoIme = JOptionPane.showInputDialog(null, "Unesite ime koje tražite!", "Lista uposlenika (Ime)", JOptionPane.INFORMATION_MESSAGE);
        
        try (java.sql.Connection konekcija = DriverManager.getConnection("jdbc:mysql://localhost/perzistencija",
                "root", "");) {
            Zaposleni uposlenik2 = null;
            List<Zaposleni> zaposleni_collection = new ArrayList();
            
            Statement citanje = konekcija.createStatement();
            citanje.executeQuery("SELECT * FROM zaposleni WHERE ime = '" + unesenoIme + "'");
            
            ResultSet result_set = citanje.getResultSet();
            while(result_set.next()) {
                    uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                            result_set.getString("adresa"), result_set.getDouble("dohodak"));
                    zaposleni_collection.add(uposlenik2);
            }
            
            JOptionPane.showMessageDialog(this, zaposleni_collection, "Lista uposlenika pod imenom '" + unesenoIme + "'", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (SQLException ex) {
            jLabel3.setText("Error in database connection: \n" + ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String unesenoIme = JOptionPane.showInputDialog(null, "Unesite ime novog zaposlenog!", "Novu uposlenik - Ime", JOptionPane.INFORMATION_MESSAGE);
        String uneseneGodine = JOptionPane.showInputDialog(null, "Unesite broj godina novog zaposlenog!", "Novi uposlenik - Godine", JOptionPane.INFORMATION_MESSAGE);
        String unesenaAdresa = JOptionPane.showInputDialog(null, "Unesite adresu novog zaposlenog!", "Novi uposlenik - Adresa", JOptionPane.INFORMATION_MESSAGE);
        String uneseniDohodak = JOptionPane.showInputDialog(null, "Unesite visinu dohotka novog zaposlenog!", "Novi uposlenik - Dohodak", JOptionPane.INFORMATION_MESSAGE);
        
        try (java.sql.Connection konekcija = DriverManager.getConnection("jdbc:mysql://localhost/perzistencija",
                "root", "");) {
            Zaposleni uposlenik = new Zaposleni (unesenoIme, Integer.parseInt(uneseneGodine), unesenaAdresa, Integer.parseInt(uneseniDohodak));
            PreparedStatement unos = konekcija.prepareStatement("INSERT INTO zaposleni (ime, godine, adresa, dohodak)"
                    + "VALUES (?, ?, ?, ?)");
            unos.setString(1, uposlenik.getIme());
            unos.setString(2, String.valueOf(uposlenik.getGodine()));
            unos.setString(3, uposlenik.getAdresa());
            unos.setString(4, String.valueOf(uposlenik.getDohodak()));
            int potvrdaUnosa = JOptionPane.showConfirmDialog(this, uposlenik, "Potvrda unosa novog uposlenika", JOptionPane.INFORMATION_MESSAGE);
            if(potvrdaUnosa == 0) {
                unos.execute();
            }
            Statement citanje = konekcija.createStatement();
            citanje.executeQuery("SELECT * FROM zaposleni");
            
            Zaposleni uposlenik2 = null;
            List<Zaposleni> zaposleni_collection = new ArrayList();
            
            ResultSet result_set = citanje.getResultSet();
            while(result_set.next()) {
                    uposlenik2 = new Zaposleni(result_set.getString("ime"), result_set.getInt("godine"), 
                            result_set.getString("adresa"), result_set.getDouble("dohodak"));
                    zaposleni_collection.add(uposlenik2);
            }
            
            JOptionPane.showMessageDialog(this, zaposleni_collection, "Lista uposlenika", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (SQLException ex) {
            jLabel3.setText("Error in database connection: \n" + ex.getMessage());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hibernate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
